{"version":3,"sources":["components/UI/Loader/Loader.module.css","components/UI/MyButton/MyButton.module.css","components/UI/BackButton/BackButton.module.css","hooks/useTests.js","components/SearchString.jsx","components/UI/MyButton/MyButton.jsx","utils/capitalizeString.js","components/DashboardItem.jsx","components/EmptySearchResult.jsx","components/UI/Loader/Loader.jsx","components/LoadError.jsx","components/Dashboard.jsx","pages/DashboardPage.jsx","components/UI/BackButton/BackButton.jsx","pages/FinalizePage.jsx","pages/ResultsPage.jsx","store/reducers/testsActions.js","App.jsx","store/reducers/sitesActions.js","store/reducers/sitesReducer.js","store/reducers/testsReducer.js","store/reducers/index.js","API/localHostAPI.js","store/sagas/loadApp.js","store/sagas/sites.js","store/sagas/index.js","store/index.js","index.js"],"names":["module","exports","useTests","tests","config","query","items","useState","sortConfig","setSortConfig","useMemo","sortableItems","sort","a","b","key","direction","requestSort","useSortedTests","sortedAndSearchedTests","filter","test","name","toLowerCase","includes","SearchString","testsCount","handleChange","value","className","type","placeholder","onChange","e","target","MyButton","children","handleClick","cl","onClick","capitalizeFirstLetter","string","charAt","toUpperCase","slice","DashboardItem","testId","testName","testType","testStatus","siteId","site","router","useHistory","cx","classNames","bind","styles","row__name","classStatus","row__status","length","replace","href","push","EmptySearchResult","resetQuery","Loader","loader__container","loader","LoadError","Dashboard","getClassNameFor","isLoading","useSelector","state","loadError","error","map","id","status","DashboardPage","setQuery","undefined","BackButton","button","FinalizePage","to","ResultsPage","SET_IS_LOADING","TESTS_LOADING_FAILURE","TESTS_LOADING_SUCCESS","FETCH_TESTS","App","dispatch","useDispatch","sites","statusMap","ONLINE","PAUSED","STOPPED","DRAFT","modTests","statusSort","useEffect","exact","path","SITE_LOADING_FAILURE","SET_SITES","regExp","initialState","rootReducer","combineReducers","action","payload","url","instance","axios","create","baseURL","localHostAPI","get","fetchTests","loadDashboardPage","put","call","response","data","takeEvery","fetchSites","sitesWatcher","sitesId","forEach","all","responses","rootWatcher","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff6ddeb1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader__container\":\"Loader_loader__container__32BSH\",\"loader\":\"Loader_loader__1kK-T\",\"rotate\":\"Loader_rotate__1VJVf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"MyButton_results__wMPjt\",\"reset\":\"MyButton_reset__3qnVL\",\"finalize\":\"MyButton_finalize__1-aPQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"BackButton_button__qN9za\"};","import { useMemo, useState } from 'react'\r\n\r\nexport const useSortedTests = (items, config = null) => {\r\n    const [sortConfig, setSortConfig] = useState(config)\r\n    \r\n    const sortedItems = useMemo(() => {\r\n        let sortableItems = [...items]\r\n        if (sortConfig !== null) {\r\n            sortableItems.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? -1 : 1\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                    return sortConfig.direction === 'ascending' ? 1 : -1\r\n                }\r\n                return 0\r\n            })\r\n        }\r\n        return sortableItems\r\n    }, [items, sortConfig])\r\n\r\n    const requestSort = (key) => {\r\n        let direction = 'ascending'\r\n        if (\r\n            sortConfig &&\r\n            sortConfig.key === key &&\r\n            sortConfig.direction === 'ascending'\r\n        ) {\r\n            direction = 'descending'\r\n        }\r\n        setSortConfig({ key, direction })\r\n    }\r\n\r\n    return { items: sortedItems, requestSort, sortConfig, setSortConfig }\r\n}\r\n\r\nexport const useTests = ({tests, config, query}) => {\r\n    const { items, requestSort, sortConfig, setSortConfig } = useSortedTests(tests, config)\r\n\r\n    const sortedAndSearchedTests = useMemo(() => {\r\n        return items.filter(test => test.name.toLowerCase().includes(query.toLowerCase()))\r\n    }, [query, items])\r\n\r\n    return { sortedAndSearchedTests, requestSort, sortConfig, setSortConfig }\r\n}","import React from 'react'\r\nimport '../styles/SearchString.css'\r\n\r\nconst SearchString = ({ testsCount, handleChange, value }) => {\r\n    return (\r\n        <div className='searchString'>\r\n            <input\r\n                className='searchString__input'\r\n                type=\"text\"\r\n                placeholder='What test are you looking for ?'\r\n                value={value}\r\n                onChange={(e) => handleChange(e.target.value)}\r\n            />\r\n            <span className='searchString__result'>{testsCount === 1 ? `${testsCount} test` : `${testsCount} tests`}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchString","import React from 'react'\r\nimport cl from './MyButton.module.css'\r\n\r\nconst MyButton = ({ children, handleClick }) => {\r\n    return (\r\n        <button className={cl[children]} onClick={handleClick}>\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default MyButton","export const capitalizeFirstLetter = (string) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()\r\n}","import React from 'react'\r\nimport styles from '../styles/DashboardItem.css'\r\nimport MyButton from './UI/MyButton/MyButton'\r\nimport classNames from 'classnames/bind'\r\nimport { capitalizeFirstLetter } from '../utils/capitalizeString'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst DashboardItem = ({ testId, testName, testType, testStatus, siteId, site }) => {\r\n    const router = useHistory()\r\n\r\n    let cx = classNames.bind(styles)\r\n\r\n    let className = cx({\r\n        row__name: true,\r\n        [`siteId${siteId}`]: true\r\n    })\r\n\r\n    let classStatus = cx({\r\n        row__status: true,\r\n        [`${testStatus.toLowerCase()}`] : true\r\n    })\r\n\r\n    const children = testStatus === 'DRAFT' ? 'finalize' : 'results'\r\n\r\n    const handleClick = () => {\r\n        router.push(`/${children}/${testId}`)\r\n    }\r\n\r\n    return (\r\n        <tr className='table__row'>\r\n            <td className={className}>{testName}</td>\r\n            <td className='row__type'>{testType.length > 4 ? capitalizeFirstLetter(testType).replace('_', '-') : testType}</td>\r\n            <td className={classStatus}>{capitalizeFirstLetter(testStatus)}</td>\r\n            <td className='row__site'><a href={`http://${site}`}>{site}</a></td>\r\n            <td className='row__button'><MyButton handleClick={handleClick}>{ children }</MyButton></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default DashboardItem","import React from 'react'\r\nimport MyButton from './UI/MyButton/MyButton'\r\n\r\nconst EmptySearchResult = ({ resetQuery }) => {\r\n    return (\r\n        <div className='emptyResult'>\r\n            <h2>Your search did not match any results.</h2>\r\n            <MyButton handleClick={resetQuery}>reset</MyButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmptySearchResult","import React from 'react'\r\nimport cl from './Loader.module.css'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className={cl.loader__container}>\r\n            <div className={cl.loader}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","import React from 'react'\r\nimport '../styles/LoadError.css'\r\n\r\nconst LoadError = () => {\r\n    return (\r\n        <div className='loadError'>\r\n            <h2>Loading error</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadError","import React from 'react'\r\nimport DashboardItem from './DashboardItem'\r\nimport { useSelector } from 'react-redux'\r\nimport '../styles/Dashboard.css'\r\nimport EmptySearchResult from './EmptySearchResult'\r\nimport Loader from './UI/Loader/Loader'\r\nimport LoadError from './LoadError'\r\n\r\nconst Dashboard = ({ tests, requestSort, getClassNameFor, resetQuery }) => {\r\n    const isLoading = useSelector( state => state.tests.isLoading )\r\n    const loadError = useSelector( state => state.tests.error )\r\n\r\n    if (isLoading) {\r\n        return <Loader />\r\n    }\r\n\r\n    if (loadError) {\r\n        return <LoadError />\r\n    }\r\n\r\n    if (tests.length === 0) {\r\n        return <EmptySearchResult resetQuery={resetQuery} />\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='dashboard'>\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th><span onClick={() => requestSort('name')} className={getClassNameFor('name')}>name</span></th>\r\n                <th><span onClick={() => requestSort('type')} className={getClassNameFor('type')}>type</span></th>\r\n                <th><span onClick={() => requestSort('statusSort')} className={getClassNameFor('statusSort')}>status</span></th>\r\n                <th><span onClick={() => requestSort('site')} className={getClassNameFor('site')}>site</span></th>\r\n                <th></th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                tests.map( test => \r\n                    <DashboardItem\r\n                        key={test.id}\r\n                        testId={test.id}\r\n                        testName={test.name}\r\n                        testType={test.type}\r\n                        testStatus={test.status}\r\n                        siteId={test.siteId}\r\n                        site={test.site}\r\n                    />\r\n                )\r\n            }\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard","import React from 'react'\r\nimport SearchString from '../components/SearchString'\r\nimport '../styles/DashboardPage.css'\r\nimport Dashboard from '../components/Dashboard'\r\n\r\nconst DashboardPage = ({ sortedAndSearchedTests, requestSort, sortConfig, setSortConfig, query, setQuery }) => {\r\n\r\n    const getClassNameFor = (name) => {\r\n        if (!sortConfig) {\r\n            return\r\n        }\r\n        return sortConfig.key === name ? sortConfig.direction : undefined\r\n    }\r\n\r\n    const handleChangeQuery = (string) => {\r\n        setQuery(string)\r\n    }\r\n\r\n    const resetQuery = () => {\r\n        setQuery('')\r\n        setSortConfig(null)\r\n    }\r\n\r\n    return (\r\n        <div className='dashboard__page'>\r\n            <h1>Dashboard</h1>\r\n            <SearchString\r\n                testsCount={sortedAndSearchedTests.length}\r\n                handleChange={handleChangeQuery}\r\n                value={query}\r\n            />\r\n            <Dashboard\r\n                tests={sortedAndSearchedTests}\r\n                requestSort={requestSort}\r\n                getClassNameFor={getClassNameFor}\r\n                resetQuery={resetQuery}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DashboardPage","import React from 'react'\r\nimport cl from './BackButton.module.css'\r\n\r\nconst BackButton = () => {\r\n    return (\r\n        <div className={cl.button}>\r\n            Back\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BackButton","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport BackButton from '../components/UI/BackButton/BackButton'\r\nimport '../styles/FinalizePage.css'\r\n\r\nconst FinalizePage = () => {\r\n    return (\r\n        <div className='finalizePage'>\r\n            <div>\r\n                <h1>Finalize</h1>\r\n                <span>Spring promotion</span>\r\n            </div>\r\n            <Link to={'/'} className='link'><BackButton /></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FinalizePage","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport BackButton from '../components/UI/BackButton/BackButton'\r\nimport '../styles/ResultsPage.css'\r\n\r\nconst ResultsPage = () => {\r\n    return (\r\n        <div className='resultsPage'>\r\n            <div>\r\n                <h1>Results</h1>\r\n                <span>Order basket redesign</span>\r\n            </div>\r\n            <Link to={'/'} className='link'><BackButton /></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultsPage","export const SET_IS_LOADING = 'SET_IS_LOADING'\r\nexport const TESTS_LOADING_FAILURE = 'TESTS_LOADING_FAILURE'\r\nexport const TESTS_LOADING_SUCCESS = 'TESTS_LOADING_SUCCESS'\r\nexport const FETCH_TESTS = 'FETCH_TESTS'","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Switch, Route, HashRouter } from 'react-router-dom'\nimport { useTests } from './hooks/useTests'\nimport DashboardPage from './pages/DashboardPage'\nimport FinalizePage from './pages/FinalizePage'\nimport ResultsPage from './pages/ResultsPage'\nimport { FETCH_TESTS } from './store/reducers/testsActions'\n\nfunction App() {\n  const dispatch = useDispatch()\n\n  const [query, setQuery] = useState('')\n  const tests = useSelector(state => state.tests.tests)\n  const sites = useSelector(state => state.sites.sites)\n\n  const statusMap = {\n    ONLINE: 1,\n    PAUSED: 2,\n    STOPPED: 3,\n    DRAFT: 4\n  }\n\n\n  let modTests = tests.map(test => {\n    return {\n      id: test.id,\n      name: test.name,\n      type: test.type,\n      status: test.status,\n      siteId: test.siteId,\n      statusSort: statusMap[test.status],\n      site: sites[test.siteId]\n    }\n  })\n\n  const { sortedAndSearchedTests, requestSort, sortConfig, setSortConfig } = useTests({ tests: modTests, query })\n\n  useEffect(() => {\n    dispatch({ type: FETCH_TESTS })\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path='/'>\n          <DashboardPage\n            sortedAndSearchedTests={sortedAndSearchedTests}\n            requestSort={requestSort}\n            sortConfig={sortConfig}\n            setSortConfig={setSortConfig}\n            query={query}\n            setQuery={setQuery}\n          />\n        </Route>\n        <Route exact path='/results/:id'>\n          <ResultsPage />\n        </Route>\n        <Route exact path='/finalize/:id'>\n          <FinalizePage />\n        </Route>\n      </Switch>\n    </HashRouter>\n  )\n}\n\nexport default App\n","export const SITE_LOADING_SUCCESS = 'SITE_LOADING_SUCCESS'\r\nexport const SITE_LOADING_FAILURE = 'SITE_LOADING_FAILURE'\r\nexport const FETCH_SITE = 'FETCH_SITE'\r\nexport const SET_SITES = 'SET_SITES'\r\nexport const LOAD_SITE = 'LOAD_SITE'","import { SET_SITES, SITE_LOADING_FAILURE } from './sitesActions'\r\n\r\nconst regExp = /^https:\\/\\/www.|^https:\\/\\/|^http:\\/\\//\r\nconst initialState = {\r\n    sites: {},\r\n    error: null\r\n}\r\n\r\n\r\n\r\nexport const sitesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_SITES:\r\n            return {\r\n                ...state,\r\n                sites: {\r\n                    ...state.sites,\r\n                    [action.payload.id]: action.payload.url.replace(regExp, '') \r\n                }\r\n            }\r\n        case SITE_LOADING_FAILURE:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { SET_IS_LOADING, TESTS_LOADING_FAILURE, TESTS_LOADING_SUCCESS } from './testsActions'\r\n\r\n\r\nconst initialState = {\r\n    tests: [],\r\n    isLoading: false,\r\n    error: null\r\n}\r\n\r\nexport const testsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_IS_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.payload\r\n            }\r\n        case TESTS_LOADING_SUCCESS:\r\n            return {\r\n                ...state,\r\n                tests: [...action.payload]\r\n            }\r\n        case TESTS_LOADING_FAILURE:\r\n            return {\r\n                ...state,\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux'\r\nimport { sitesReducer } from './sitesReducer'\r\nimport { testsReducer } from './testsReducer'\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    tests: testsReducer,\r\n    sites: sitesReducer\r\n})","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: '  http://localhost:3100'\r\n})\r\n\r\nexport const localHostAPI = {\r\n    loadingApp() {\r\n        return instance.get(`/tests`)\r\n    },\r\n    getSite(siteId) {\r\n        return instance.get(`/sites/${siteId}`)\r\n    }\r\n}","import { takeEvery, put, call } from 'redux-saga/effects'\r\nimport { localHostAPI } from '../../API/localHostAPI'\r\nimport { FETCH_TESTS, SET_IS_LOADING, TESTS_LOADING_FAILURE, TESTS_LOADING_SUCCESS } from '../reducers/testsActions'\r\n\r\nfunction* fetchTests() {\r\n    yield put({ type: SET_IS_LOADING, payload: true })\r\n    try {\r\n        const response = yield call(localHostAPI.loadingApp)\r\n        yield put({ type: TESTS_LOADING_SUCCESS , payload: response.data})\r\n    } catch(error) {\r\n        yield put({ type: TESTS_LOADING_FAILURE, payload: error})\r\n        yield put({ type: SET_IS_LOADING, payload: false })\r\n    }\r\n}\r\n\r\nexport function* loadDashboardPage() {\r\n    yield takeEvery(FETCH_TESTS, fetchTests)\r\n}","import { takeEvery, put, call, all } from 'redux-saga/effects'\r\nimport { localHostAPI } from '../../API/localHostAPI'\r\nimport { SET_SITES, SITE_LOADING_FAILURE } from '../reducers/sitesActions'\r\nimport { SET_IS_LOADING, TESTS_LOADING_SUCCESS } from '../reducers/testsActions'\r\n\r\nconst sitesId = []\r\n\r\nfunction* fetchSites(action) {\r\n    yield action.payload.forEach(test => {\r\n        if (sitesId.includes(test.siteId)) {\r\n            return\r\n        } else {\r\n            sitesId.push(test.siteId)\r\n        }\r\n    })\r\n\r\n    const responses = yield all(sitesId.map(test => {\r\n        try {\r\n            return call(localHostAPI.getSite, test)\r\n        } catch (error) {\r\n            return put({ type: SITE_LOADING_FAILURE, payload: error })\r\n        }\r\n    }))\r\n\r\n    yield all(responses.map(response => {\r\n        return put({ type: SET_SITES, payload: response.data })\r\n    }))\r\n\r\n    yield put({ type: SET_IS_LOADING, payload: false })\r\n}\r\n\r\n\r\nexport function* sitesWatcher() {\r\n    yield takeEvery(TESTS_LOADING_SUCCESS, fetchSites)\r\n}","import {all} from 'redux-saga/effects'\r\nimport { loadDashboardPage } from './loadApp'\r\nimport { sitesWatcher } from './sites'\r\n\r\nexport function* rootWatcher() {\r\n    yield all([\r\n        loadDashboardPage(),\r\n        sitesWatcher()\r\n    ])\r\n}","import createSagaMiddleware from '@redux-saga/core'\r\nimport { applyMiddleware, createStore } from 'redux'\r\nimport { rootReducer } from './reducers'\r\nimport { rootWatcher } from './sagas'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware))\r\n\r\nsagaMiddleware.run(rootWatcher)","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { store } from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}